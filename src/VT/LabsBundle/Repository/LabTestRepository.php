<?php

namespace VT\LabsBundle\Repository;
use Doctrine\ORM\Query;
use VT\VTCoreBundle\Entity\VTEntityRepository;

/**
 * LabTestRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LabTestRepository extends VTEntityRepository
{
	/**
     * @param array $fullSpec
     * @param boolean $countOnly
     * @return array
     */
    public function fetchTestsByFilter($fullSpec, $countOnly = false)
    {

        $searchSpec = $fullSpec['searchSpec'];
        $sortSpec = $fullSpec['sortSpec'];
        $pageSpec = $fullSpec['pageSpec'];

        $extraQ = "";

        if(!empty($searchSpec)) {
            if (array_key_exists('keyword', $searchSpec)) {
                $k = $searchSpec['keyword'];
                if (!empty($k)) {
                    if (!empty($extraQ))
                        $extraQ .= " and ";
                    $extraQ .= "(t.name like '%" . $k . "%' )";
                }
            }
        }

        $cq = "";
        $cq .= "select count(distinct l.id) ";
        $cq .= "from LabsBundle:LabTest as l ";
        $cq .= "left join l.test as t ";
        if (!empty($extraQ)) {
            $cq .= "where " . $extraQ;
        }

        $q = "";
        if (!$countOnly) {
            $q .= "select l ";
            $q .= "from LabsBundle:LabTest as l ";
    		$q .= "left join l.test as t ";
            if (!empty($extraQ)) {
                $q .= "where " . $extraQ;
            }
        }

        //Order by
        $q .= " order by l.lastUpd desc ";
        
        // Total Count
        $tql = $this->createQuery($cq);
        $totalRecords = $tql->getResult();

        // tests
        $tests = array();
        if (!$countOnly) {
            $dql = $this->createQuery($q);
            if (!empty($pageSpec) && $pageSpec['pageSize'] != "") {
                $dql->setMaxResults($pageSpec['pageSize'])->setFirstResult(($pageSpec['currentPage'] - 1) * $pageSpec['pageSize']);
            }
            $tests = $dql->getResult();
            return array("totalRecords" => $totalRecords, "tests" => $tests);
        } else {
            return array("totalRecords" => $totalRecords[0][1]);
        }
    }

    public function fetchCostByTestId($testId = null)
    {
        $q = "";
        $q .= " select t.cost as cost";
        $q .= " from LabsBundle:LabTest as t ";
        $q .= " where t.id = '" . $testId . "'";
        
        $testList = $this->createQuery($q)->getResult(Query::HYDRATE_ARRAY);
        return $testList;
    }

    public function fetchLabTests($testIds)
    {
        $q = "";
        $q .= " select t ";
        $q .= " from LabsBundle:LabTest as t ";
        $q .= " where t.id in ('" . implode("','", explode(',', $testIds)) . "')";
        
        $testList = $this->createQuery($q)->getResult();
        return $testList;
    }
}
